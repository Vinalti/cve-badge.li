import json
from functools import lru_cache
from typing import Annotated
from urllib.request import urlopen

from fastapi import FastAPI, Path
from fastapi.responses import HTMLResponse, Response
from pybadges import badge

# CONSTANTS
CVE_API_ENDPOINT = 'https://cveawg.mitre.org/api/cve/'
CVE_REDIRECT_LINK = 'https://cve.mitre.org/cgi-bin/cvename.cgi?name='
DEFAULT_VALUE = '?'
DEFAULT_COLOR = '#888'
YEAR_DOC = "The year of publication of the CVE"
ID_DOC = "The ID of the CVE"

# INIT APP
app = FastAPI()


# CLASS DECLARATION
class SVGResponse(HTMLResponse):
    media_type = "image/svg+xml"


# UTILS
def rgb_to_hex(r:int, g:int, b:int) -> str:
    return f'#{r:02x}{g:02x}{b:02x}'


@lru_cache
def fetch_data(cve_id:str) -> dict:
    url = CVE_API_ENDPOINT + f"CVE-{cve_id}"
    try:
        response = urlopen(url, timeout=5)
        return json.loads(response.read())
    except Exception:
        return {}


def get_cvss_score_from_cve_org(data:dict):
    level = level_name = None
    version = 0
    try:
        metrics = data['containers']['cna']['metrics']
        for metric in metrics:
            for key, val in metric.items():
                if ('cvss' in key and isinstance(val, dict) and 'baseScore' in val.keys()):
                    v = float(val['version'])
                    if (v > version):
                        level = val['baseScore']
                        level_name = val['baseSeverity']
                        version = v
    except (ValueError, TypeError, KeyError):
        # Error is expected in case 'metrics' is not in response
        pass
    finally:
        return (level, level_name)


def build_svg(id:str, level:str, level_name:str) -> str:
    logo = "app/bug.svg"
    link = CVE_REDIRECT_LINK + id
    label = f'CVE-{id}'
    try:
        t = float(level)/10
        color = rgb_to_hex(*(int(255 * t), int(255 * (1 - t)), 50))
        value = f"{level_name} Â· {level}" if level_name else DEFAULT_VALUE
    except Exception:
        value = DEFAULT_VALUE
        color = DEFAULT_COLOR
    svg = badge(left_text=label, right_text=value, right_color=color,
                left_color="#222", logo=logo, embed_logo=True, left_link=link)
    return svg


# GET /cve-<year>-<id>
@app.get("/CVE-{year}-{id}",
         response_class=SVGResponse,
         responses={200: {"description": "Return the badge as SVG image."}})
async def cve_badge(
        year=Annotated[int, Path(title=YEAR_DOC, gt=1900, le=2100)],
        id=Annotated[int, Path(title=ID_DOC, gt=1, le=99999999)]):
    year, id = int(year), int(id)
    cve_id = f'{year}-{id:04}'
    data_json = fetch_data(cve_id)
    level, level_name = get_cvss_score_from_cve_org(data_json)
    image = build_svg(cve_id, level, level_name)
    return Response(image, media_type="image/svg+xml")
