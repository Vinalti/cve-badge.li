import logging
import os
from functools import lru_cache
from typing import Annotated

import requests
from fastapi import FastAPI, Path
from fastapi.responses import HTMLResponse, Response
from pybadges import badge
from uvicorn import logging as uvicorn_logs

# CONSTANTS
MIRTRE_API_ENDPOINT = 'https://cveawg.mitre.org/api/cve/'
NIST_API_ENDPOINT = 'https://services.nvd.nist.gov/rest/json/cves/2.0'
NIST_DISCLAIMER = 'This product uses the NVD API but is not endorsed or certified by the NVD.'
CVE_REDIRECT_LINK = 'https://cve.mitre.org/cgi-bin/cvename.cgi?name='
DEFAULT_VALUE = '?'
DEFAULT_COLOR = '#888'
YEAR_DOC = "The year of publication of the CVE"
ID_DOC = "The ID of the CVE"
REQUESTS_TIMEOUT_SECONDS = 7

logger = logging.getLogger("uvicorn")
formatter = uvicorn_logs.DefaultFormatter(fmt='%(asctime)s %(levelprefix)s %(message)s')
handlers = logger.handlers
for h in handlers:
    h.setFormatter(formatter)

# INIT APP
app = FastAPI()


# CLASS DECLARATION
class SVGResponse(HTMLResponse):
    media_type = "image/svg+xml"


# UTILS
def rgb_to_hex(r:int, g:int, b:int) -> str:
    return f'#{r:02x}{g:02x}{b:02x}'


def get_label_from_score(score:float):
    ''' Generate label from score. (src: https://nvd.nist.gov/vuln-metrics/cvss) '''
    logger.debug('Generating artificial Severity label')
    table = [(0.0, 'NONE'),
             (0.1, 'LOW'),
             (4.0, 'MEDIUM'),
             (7.0, 'HIGH'),
             (9.0, 'CRITICAL')]
    score = max(0, score)
    return [label for v, label in table if v <= score].pop(-1)


@lru_cache
def fetch_data_from_cve_org(cve_id:str) -> dict:
    logger.debug(f"CVE-{cve_id}: Fetching data from CVE.org")
    url = MIRTRE_API_ENDPOINT + f"CVE-{cve_id}"
    try:
        response = requests.get(url, timeout=REQUESTS_TIMEOUT_SECONDS)
        return response.json()
    except Exception as e:
        logger.warning(f"CVE-{cve_id}: Error while fetching CVE.org data. ({type(e).__name__}: {str(e)})")
        return None


@lru_cache
def fetch_data_from_nist(cve_id:str) -> dict:
    ''' Fetch fata from NIST API '''
    logger.debug(f"CVE-{cve_id}: Fetching data from NIST")
    api_key = os.getenv('NIST_API_KEY')
    try:
        url = NIST_API_ENDPOINT
        params = {'cveId': 'CVE-'+cve_id}
        headers = {'apiKey': api_key}
        response = requests.get(url, headers=headers, params=params, timeout=REQUESTS_TIMEOUT_SECONDS)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.warning(f"CVE-{cve_id}: Error while fetching NIST data. ({type(e).__name__}: {str(e)})")
        return None


def get_cvss_score_from_nist(cve_id:str):
    data = fetch_data_from_nist(cve_id)
    if data is None:
        return (None, None)
    level = level_name = None
    version = 0
    try:
        metrics = data['vulnerabilities'][0]['cve']['metrics']
        for _, metric_list in metrics.items():
            for metric in metric_list:
                if metric['type'] != 'Primary':
                    continue
                data = metric['cvssData']
                if (isinstance(data, dict) and 'baseScore' in data.keys()):
                    v = float(data['version'])
                    if (v > version):
                        level = data['baseScore']
                        level_name = data['baseSeverity']
                        version = v
        logger.info(f"CVE-{cve_id} CVSS score was successfully retrieved from NIST [{level} - {level_name}]")
    except Exception as e:
        logger.warning(f"CVE-{cve_id}:  Impossible to parse NIST response. ({type(e).__name__}: {str(e)})")
    finally:
        return (level, level_name)


def get_cvss_score_from_cve_org(cve_id:str):
    data = fetch_data_from_cve_org(cve_id)
    if data is None:
        return (None, None)
    level = level_name = None
    version = 0
    try:
        metrics = data['containers']['cna']['metrics']
        for metric in metrics:
            for key, val in metric.items():
                if ('cvss' in key and isinstance(val, dict) and 'baseScore' in val.keys()):
                    v = float(val['version'])
                    if (v > version):
                        level = val['baseScore']
                        level_name = val['baseSeverity']
                        version = v
        logger.info(f"CVE-{cve_id} CVSS score was successfully retrieved from cve.org [{level} - {level_name}]")
    except Exception as e:
        logger.warning(f"CVE-{cve_id}: Impossible to parse cve.org response. {type(e).__name__}: {str(e)}",)
    finally:
        return (level, level_name)


def get_cvss_score(cve_id:str):
    values = get_cvss_score_from_cve_org(cve_id)
    if (None in values):
        values = get_cvss_score_from_nist(cve_id)
    return values


def build_svg(id:str, level:str, level_name:str) -> str:
    logger.debug(f"Building image for CVE-{id}")
    logo = "app/bug.svg"
    link = CVE_REDIRECT_LINK + id
    label = f'CVE-{id}'
    color, value = DEFAULT_COLOR, DEFAULT_VALUE
    try:
        if level is not None:
            if not level_name:
                level_name = get_label_from_score(level)
            logger.debug(f"Generating badge for score of `{level}` named `{level_name}`")
            t = float(level)/10
            color = rgb_to_hex(*(int(255 * t), int(255 * (1 - t)), 50))
            value = f"{level_name} Â· {level}"
    except Exception as e:
        logger.warning(f"{label}: Unable to generate badge color: ({type(e).__name__}: {str(e)})")
    svg = badge(left_text=label, right_text=value, right_color=color,
                left_color="#222", logo=logo, embed_logo=True, left_link=link)
    return svg


# GET /cve-<year>-<id>
@app.get("/CVE-{year}-{id}",
         response_class=SVGResponse,
         responses={200: {"description": "Return the badge as SVG image."}})
async def cve_badge(
        year=Annotated[int, Path(title=YEAR_DOC, gt=1900, le=2100)],
        id=Annotated[int, Path(title=ID_DOC, gt=1, le=99999999)]):
    year, id = int(year), int(id)
    cve_id = f'{year}-{id:04}'
    logger.debug(f"Received request for CVE-{cve_id}")
    score, label = get_cvss_score(cve_id)
    image = build_svg(cve_id, score, label)
    return Response(image, media_type="image/svg+xml")
